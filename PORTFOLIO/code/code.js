| الأمر                  | الشرح                                                      |
| ---------------------- | ---------------------------------------------------------- |
| `// تعليق`             | تعليق على سطر واحد لا يتم تنفيذه.                          |
| `/* تعليق */`          | تعليق على عدة أسطر.                                        |
| `console.log("Hello")` | يطبع النص داخل الأقواس في **الكونسول** (للتجربة والتصحيح). |
| `let x = 5;`           | إنشاء متغير يمكن تغيير قيمته لاحقًا.                       |
| `const y = 10;`        | إنشاء متغير **ثابت** لا يمكن تغييره.                       |
| `var z = 3;`           | طريقة قديمة لإنشاء المتغيرات (لا تُستخدم عادة الآن).       |
| `typeof x`             | يحدد نوع البيانات (رقم، نص، منطق...).                      |
| `prompt("أدخل اسمك")`  | يظهر مربع إدخال للمستخدم.                                  |
| `alert("مرحبًا")`      | يظهر رسالة منبثقة للمستخدم.                                |

| النوع         | المثال                              | الشرح                           |
| ------------- | ----------------------------------- | ------------------------------- |
| **Number**    | `let a = 10;`                       | أرقام صحيحة أو عشرية.           |
| **String**    | `let name = "Abdo";`                | نصوص داخل علامات اقتباس.        |
| **Boolean**   | `let isOnline = true;`              | قيمتان فقط: `true` أو `false`.  |
| **Array**     | `let colors = ["red", "blue"];`     | مجموعة بيانات داخل أقواس مربعة. |
| **Object**    | `let user = {name:"Abdo", age:25};` | كائن يحتوي على مفاتيح وقيم.     |
| **Null**      | `let x = null;`                     | لا يحتوي على أي قيمة.           |
| **Undefined** | `let x;`                            | متغير تم تعريفه لكن بدون قيمة.  |

| العملية | الشرح                 |
| ------- | --------------------- |
| `+`     | الجمع أو دمج النصوص   |
| `-`     | الطرح                 |
| `*`     | الضرب                 |
| `/`     | القسمة                |
| `%`     | الباقي من القسمة      |
| `**`    | الأس (مثل 2 ** 3 = 8) |
| `++`    | زيادة 1               |
| `--`    | إنقاص 1               |

| العملية | الشرح                         | مثال          |
| ------- | ----------------------------- | ------------- |
| `==`    | يساوي (يقارن القيم فقط)       | `5 == "5" ✅`  |
| `===`   | يساوي تمامًا (القيمة + النوع) | `5 === "5" ❌` |
| `!=`    | لا يساوي                      | `5 != 4 ✅`    |
| `!==`   | لا يساوي تمامًا               | `5 !== "5" ✅` |
| `>`     | أكبر من                       | `8 > 5 ✅`     |
| `<`     | أصغر من                       | `2 < 5 ✅`     |
| `>=`    | أكبر أو يساوي                 | `5 >= 5 ✅`    |
| `<=`    | أصغر أو يساوي                 | `3 <= 4 ✅`    |

if (age >= 18) {
  console.log("مسموح بالدخول");
} else {
  console.log("غير مسموح");
}
| الصيغة    | الشرح                                  |
| --------- | -------------------------------------- |
| `if`      | إذا كان الشرط صحيحًا نفّذ الكود        |
| `else`    | إذا لم يكن الشرط صحيحًا نفّذ هذا الكود |
| `else if` | شرط إضافي بين `if` و `else`            |
| `switch`  | بديل منظم عن if عند وجود حالات كثيرة   |
switch(day) {
  case "Monday": console.log("الاثنين"); break;
  case "Tuesday": console.log("الثلاثاء"); break;
  default: console.log("يوم غير معروف");
}

| الأمر        | الشرح                     | مثال                                              |
| ------------ | ------------------------- | ------------------------------------------------- |
| `for`        | تكرار لعدد محدد من المرات | `for(let i=0; i<5; i++){ console.log(i); }`       |
| `while`      | تكرار طالما الشرط صحيح    | `while(x < 10){ x++; }`                           |
| `do...while` | ينفذ مرة واحدة على الأقل  | `do { x++; } while(x < 5);`                       |
| `for...of`   | تكرار على عناصر مصفوفة    | `for(let color of colors){ console.log(color); }` |
| `for...in`   | تكرار على مفاتيح كائن     | `for(let key in user){ console.log(key); }`       |

| الصيغة                                               | الشرح                       |
| ---------------------------------------------------- | --------------------------- |
| `function sayHello(){}`                              | إنشاء دالة عادية            |
| `sayHello();`                                        | استدعاء الدالة              |
| `function add(a,b){ return a+b; }`                   | دالة مع مدخلات ومخرجات      |
| `const greet = (name) => console.log("Hi " + name);` | دالة سهمية (Arrow Function) |

| الأمر             | الشرح                                |
| ----------------- | ------------------------------------ |
| `arr.length`      | عدد العناصر                          |
| `arr.push(x)`     | إضافة عنصر في النهاية                |
| `arr.pop()`       | حذف آخر عنصر                         |
| `arr.shift()`     | حذف أول عنصر                         |
| `arr.unshift(x)`  | إضافة عنصر في البداية                |
| `arr.indexOf(x)`  | موقع العنصر                          |
| `arr.includes(x)` | هل العنصر موجود؟                     |
| `arr.map()`       | إنشاء مصفوفة جديدة بعد تعديل كل عنصر |
| `arr.filter()`    | تصفية المصفوفة حسب شرط               |
| `arr.forEach()`   | تنفيذ كود على كل عنصر                |

let user = {
  name: "Abdo",
  age: 25,
  job: "Developer"
};
console.log(user.name); // الوصول إلى خاصية
user.city = "Algeria"; // إضافة خاصية جديدة

| الأمر                                   | الشرح                     |
| --------------------------------------- | ------------------------- |
| `document.getElementById("id")`         | الوصول إلى عنصر بالمعرّف  |
| `document.querySelector(".class")`      | الوصول إلى أول عنصر مطابق |
| `element.innerHTML`                     | تغيير محتوى العنصر        |
| `element.style.color = "red"`           | تغيير تنسيق العنصر        |
| `element.addEventListener("click", fn)` | تنفيذ دالة عند حدث معين   |
| `document.createElement("div")`         | إنشاء عنصر جديد           |
| `parent.appendChild(child)`             | إضافة عنصر إلى عنصر آخر   |

fetch("data.json")
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.log("خطأ:", err));
| الأمر        | الشرح                             |
| ------------ | --------------------------------- |
| `fetch(url)` | جلب بيانات من مصدر خارجي          |
| `.then()`    | التعامل مع النتيجة بعد نجاح الجلب |
| `.catch()`   | التعامل مع الأخطاء                |

| الأمر                 | الشرح                           |
| --------------------- | ------------------------------- |
| `setTimeout(fn, ms)`  | ينفذ الكود بعد مدة محددة        |
| `setInterval(fn, ms)` | ينفذ الكود كل فترة زمنية متكررة |
| `clearInterval(id)`   | يوقف التكرار                    |

| الأمر                 | الشرح                                   |
| --------------------- | --------------------------------------- |
| `let` / `const`       | متغيرات حديثة                           |
| `=>`                  | دوال سهمية                              |
| `template literals`   | `${variable}` داخل النصوص               |
| `destructuring`       | استخراج بيانات من كائن أو مصفوفة بسهولة |
| `spread operator ...` | نسخ ودمج المصفوفات                      |
| `import` / `export`   | تقسيم الكود إلى ملفات                   |
